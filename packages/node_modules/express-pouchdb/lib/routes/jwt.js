'use strict';

const utils = require('../utils');
const jwt = require('jsonwebtoken');

module.exports = function(app) {
  utils.requires(app, 'config-infrastructure');

  function getUsersDB(req) {
    return utils.getUsersDB(app, req.PouchDB);
  }

  function postHandler(req, res) {
    var name = req.body.name;
    var password = req.body.password;
    getUsersDB(req)
      .then(function(db) {
        return db.multiUserLogIn(name, password);
      })
      .then(function(resp) {
        if (req.query.next) {
          utils.setLocation(res, req.query.next);
          return res.status(302).end();
        }
        const publicKey = app.couchConfig.get('jwt', 'public_key');
        if (!publicKey) {
          throw new Error('Missing jwt.public_key');
        }
        const expiresIn = app.couchConfig.get('jwt', 'expires_in');
        if (!expiresIn) {
          throw new Error('Missing jwt.expires_in');
        }
        const payload = {
          userCtx: {
            name: resp.name,
            roles: resp.roles
          }
        };
        const accessToken = jwt.sign(payload, publicKey, { expiresIn });
        utils.sendJSON(res, 200, {
          accessToken,
          expiresIn
        });
      })
      .catch(function(err) {
        utils.sendError(res, err);
      });
  }
  app.post('/_jwt', utils.jsonParser, utils.urlencodedParser, postHandler);

  app.use(function(req, res, next) {
    const value = app.couchConfig.get('httpd', 'authentication_handlers') || '';
    if (value.indexOf('jwt') === -1) {
      return next();
    }

    const jwtAlgorithm = app.couchConfig.get('jwt', 'algorithm');
    if (!jwtAlgorithm) {
      const error = new Error('Missing jwt.algorithm');
      utils.sendError(res, error);
      return;
    }
    const jwtSecretOrPublicKey = app.couchConfig.get('jwt', 'public_key');
    if (!jwtSecretOrPublicKey) {
      const error = new Error('Missing jwt.public_key');
      utils.sendError(res, error);
      return;
    }

    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      // grant admin party for the white list
      const { remoteAddress } = req.connection;
      const whiteList = app.couchConfig.get('jwt', 'white_list');
      if (whiteList && whiteList.includes(remoteAddress)) {
        return setSession(req, { roles: ['_admin'] }, next);
      }
      const error = new Error('Missing authorization bearer');
      utils.sendError(res, error);
      return;
    }

    const token = authHeader.substring(7, authHeader.length);
    const options = { algorithms: [jwtAlgorithm] };
    jwt.verify(token, jwtSecretOrPublicKey, options, function(error, decoded) {
      if (error) {
        utils.sendError(res, error);
        return;
      }

      if (!decoded.userCtx) {
        const error = new Error('Missing userCtx in payload');
        utils.sendError(res, error);
        return;
      }

      setSession(req, { ...decoded.userCtx }, next);
    });
  });
};

function setSession(req, userCtx, next) {
  if (!userCtx.roles) {
    userCtx.roles = [];
  }
  req.couchSession = {
    ok: true,
    userCtx,
    authenticated: 'jwt'
  };
  next();
}
